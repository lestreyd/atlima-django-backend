# Generated by Django 4.1 on 2022-08-09 01:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('native_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('native_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('native_middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('phone_number', models.CharField(db_index=True, max_length=255, unique=True)),
                ('facebook', models.CharField(max_length=255)),
                ('vk', models.CharField(max_length=255)),
                ('instagram', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('photo', models.ImageField(upload_to='profiles')),
                ('sex', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('strong_hand', models.IntegerField(choices=[(1, 'Right'), (2, 'Left')], default=1)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AggregatedCourseResultForSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.UUIDField(blank=True, null=True, verbose_name='Result UUID')),
                ('result_type', models.IntegerField(choices=[(1, 'Guncheck'), (2, 'Course result'), (3, 'Disqualification (DNS/DQ)')], default=2)),
                ('A', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('C', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('D', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('M', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('NS', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('T', models.FloatField(blank=True, null=True)),
                ('category', models.IntegerField(blank=True, choices=[(1, 'Super Junior'), (2, 'Junior'), (3, 'Senior'), (4, 'Super Senior'), (5, 'Lady'), (6, 'Regular')], null=True)),
                ('power_factor', models.IntegerField(blank=True, choices=[(1, 'Minor'), (2, 'Major')], null=True)),
                ('strong_hand', models.IntegerField(blank=True, choices=[(1, 'Right'), (2, 'Left')], null=True)),
                ('cancellation', models.IntegerField(blank=True, choices=[(1, 'Did not started'), (2, 'Disqualified')], default=None, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='result_selfies')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('delete_timestamp', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='BankNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('terminal_key', models.CharField(max_length=128)),
                ('order_id', models.CharField(max_length=128)),
                ('success', models.BooleanField()),
                ('status', models.CharField(max_length=32)),
                ('payment_id', models.IntegerField()),
                ('error_code', models.CharField(max_length=32)),
                ('amount', models.IntegerField()),
                ('card_id', models.IntegerField()),
                ('pan', models.CharField(max_length=16)),
                ('expiration_date', models.CharField(max_length=10)),
                ('token', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alpha2', models.CharField(db_index=True, max_length=2)),
                ('alpha3', models.CharField(db_index=True, max_length=3)),
                ('iso', models.SmallIntegerField()),
                ('location', models.CharField(max_length=128, null=True)),
                ('location_precise', models.CharField(max_length=256, null=True)),
                ('weight_in_list', models.SmallIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_number', models.PositiveSmallIntegerField()),
                ('image', models.ImageField(upload_to='courses')),
                ('title', models.CharField(max_length=256)),
                ('scoring_shoots', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('minimum_shoots', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('illustration', models.ImageField(upload_to='courses')),
                ('scoring_paper', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('digital_code', models.CharField(max_length=3)),
                ('code', models.CharField(max_length=3)),
                ('title', models.CharField(max_length=128)),
                ('weight_in_list', models.PositiveBigIntegerField(blank=True, default=0, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_type', models.IntegerField(blank=True, choices=[(1, 'Individual Competitions'), (2, 'Team competitions (4 ppl)'), (3, 'Duel')], default=1, null=True)),
                ('code', models.CharField(blank=True, max_length=16, null=True)),
                ('active', models.BooleanField(default=True)),
                ('standart_speed_courses', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='events')),
                ('address', models.CharField(blank=True, max_length=4096, null=True)),
                ('start_event_date', models.DateTimeField(blank=True, null=True)),
                ('end_event_date', models.DateTimeField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('site', models.CharField(blank=True, max_length=512, null=True)),
                ('status', models.CharField(blank=True, choices=[('Draft', 'DRAFT'), ('Publish', 'PUBLISH'), ('Deleted', 'DELETED')], default='Draft', max_length=32, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('approved', models.BooleanField(default=False)),
                ('registration_opened', models.BooleanField(default=False)),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=17, null=True)),
                ('standart_speed_courses', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, max_length=512, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('has_results', models.BooleanField(default=False)),
                ('imported', models.BooleanField(default=False)),
                ('dismissed', models.BooleanField(default=False)),
                ('dismiss_reason', models.CharField(blank=True, max_length=4096, null=True)),
                ('moderated', models.BooleanField(default=False)),
                ('banned', models.BooleanField(blank=True, default=None, null=True)),
                ('banned_moderation', models.BooleanField(default=False)),
                ('freezed', models.BooleanField(default=False)),
                ('first_calculation_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_calculation_datetime', models.DateTimeField(blank=True, null=True)),
                ('administrators', models.ManyToManyField(related_name='administrators', to=settings.AUTH_USER_MODEL)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_city', to='core.city')),
                ('content', models.ManyToManyField(to='core.content')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_country', to='core.country')),
                ('courses', models.ManyToManyField(to='core.course')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_created_by', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='currency_registration_price', to='core.currency')),
                ('director', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='director', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventEVSKStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('regional_status', models.IntegerField(blank=True, choices=[(1, 'Regional'), (2, 'Federal')], default=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveBigIntegerField()),
                ('status', models.BooleanField(default=False)),
                ('payment_id', models.CharField(blank=True, max_length=512, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='organizers')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('site', models.URLField()),
                ('address', models.TextField()),
                ('phone', models.CharField(blank=True, max_length=256, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('imported', models.BooleanField(default=False)),
                ('administrators', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizer_city', to='core.city')),
                ('content', models.ManyToManyField(to='core.content')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizer_country', to='core.country')),
            ],
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=8)),
                ('discount', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('limit', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('finish_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=5, null=True)),
                ('weight', models.SmallIntegerField(verbose_name='Region weight in list')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='region_country_ref', to='core.country')),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_price', models.PositiveBigIntegerField()),
                ('participant_group', models.CharField(blank=True, max_length=32, null=True)),
                ('participant_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('category', models.IntegerField(choices=[(1, 'Super Junior'), (2, 'Junior'), (3, 'Senior'), (4, 'Super Senior'), (5, 'Lady'), (6, 'Regular')], default=6)),
                ('power_factor', models.IntegerField(choices=[(1, 'Minor'), (2, 'Major')], default=1)),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('paid', models.BooleanField(default=False)),
                ('dont_include_in_rating_calculation', models.BooleanField(default=False)),
                ('percentage', models.FloatField(default=0)),
                ('stage_points', models.FloatField(default=0)),
                ('initial_rating', models.IntegerField(blank=True, default=0, null=True)),
                ('deviation', models.FloatField(blank=True, default=0, null=True)),
                ('handicap', models.FloatField(blank=True, default=0, null=True)),
                ('performance', models.FloatField(blank=True, default=0, null=True)),
                ('rating_increase', models.FloatField(blank=True, default=0, null=True)),
                ('points', models.FloatField(blank=True, default=0, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currency_for_slot', to='core.currency')),
                ('discipline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.discipline')),
                ('promocode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promocode_user_for_slot', to='core.promocode')),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='sports')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('site', models.CharField(blank=True, max_length=1024, null=True)),
                ('moderated', models.BooleanField(default=False, verbose_name='Events must be moderated')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Squad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('squad_number', models.PositiveIntegerField()),
                ('comment', models.CharField(blank=True, max_length=512, null=True)),
                ('squad_date', models.DateTimeField(blank=True, null=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, unique=True, verbose_name='Title')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_result', models.CharField(choices=[('NS', 'NS'), ('A', 'A'), ('AC', 'AC'), ('ACD', 'ACD')], default='ACD', max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='targets')),
                ('paper', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(choices=[('init', 'Initialization'), ('finish_authorize', 'Finish Authorization'), ('add_card', 'Add Card'), ('attach_card', 'Attach Card'), ('remove_card', 'Remove Card'), ('card_list', 'Card List'), ('cancel', 'Cancel Payment')], default='init', max_length=128)),
                ('information_type', models.CharField(choices=[('Bank Request', 'Request'), ('Bank Response', 'Response')], default='Bank Request', max_length=128)),
                ('terminal_key', models.CharField(max_length=128)),
                ('amount', models.CharField(blank=True, max_length=128, null=True)),
                ('order_id', models.CharField(blank=True, max_length=128, null=True)),
                ('customer_key', models.CharField(blank=True, max_length=256, null=True)),
                ('language', models.CharField(blank=True, max_length=10, null=True)),
                ('recurrent', models.CharField(blank=True, max_length=3, null=True)),
                ('success', models.BooleanField(blank=True, default=False, null=True)),
                ('status', models.CharField(blank=True, max_length=128, null=True)),
                ('payment_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('error_code', models.CharField(blank=True, max_length=4, null=True)),
                ('card_data', models.CharField(blank=True, max_length=4096, null=True)),
                ('card_number', models.CharField(blank=True, max_length=50, null=True)),
                ('exp', models.CharField(blank=True, max_length=10, null=True)),
                ('card_holder', models.CharField(blank=True, max_length=512, null=True)),
                ('cvv', models.CharField(blank=True, max_length=3, null=True)),
                ('check_type', models.CharField(blank=True, max_length=10, null=True)),
                ('request_key', models.CharField(blank=True, max_length=512, null=True)),
                ('card_id', models.CharField(blank=True, max_length=128, null=True)),
                ('currency', models.CharField(blank=True, max_length=5, null=True)),
                ('token', models.CharField(blank=True, max_length=256, null=True)),
                ('ip', models.CharField(blank=True, max_length=20, null=True)),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('send_mail', models.BooleanField(blank=True, null=True)),
                ('info_email', models.CharField(blank=True, max_length=256, null=True)),
                ('rebill_id', models.CharField(blank=True, max_length=256, null=True)),
                ('pay_form', models.CharField(blank=True, max_length=1024, null=True)),
                ('receipt', models.JSONField(blank=True, null=True)),
                ('redirect_due_date', models.CharField(blank=True, max_length=20, null=True)),
                ('payment_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('message', models.CharField(blank=True, max_length=1024, null=True)),
                ('details', models.CharField(blank=True, max_length=1024, null=True)),
                ('md', models.CharField(blank=True, max_length=64, null=True)),
                ('response', models.JSONField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang_code', models.CharField(max_length=5, unique=True)),
                ('data', models.JSONField()),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='weapons')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_version', models.IntegerField()),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.discipline')),
            ],
        ),
        migrations.CreateModel(
            name='TargetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.systemlanguage')),
                ('target_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.target')),
            ],
        ),
        migrations.CreateModel(
            name='TargetSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField()),
                ('alpha_cost', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('course_target_array', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.course')),
                ('target_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.target')),
            ],
        ),
        migrations.CreateModel(
            name='SystemEventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, unique=True, verbose_name='title')),
                ('description', models.CharField(max_length=512, verbose_name='description')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('system_object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='system_object_for_event_type', to='core.systemobject', verbose_name='System object')),
            ],
        ),
        migrations.CreateModel(
            name='SystemEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('json_attributes', models.JSONField(blank=True, null=True)),
                ('system_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.systemeventtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SportAdministrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_sks_member', models.BooleanField(default=False)),
                ('is_sks_president', models.BooleanField(default=False)),
                ('is_referee_collegium_member', models.BooleanField(default=False)),
                ('is_referee_collegium_president', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.country', verbose_name='country')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.region', verbose_name='region')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sport', verbose_name='sport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='SlotResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_points', models.FloatField(default=0)),
                ('stage_points', models.FloatField(default=0)),
                ('hit_factor', models.FloatField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.course')),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.slot')),
            ],
        ),
        migrations.AddField(
            model_name='slot',
            name='squad',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='slot_squad_ref', to='core.squad'),
        ),
        migrations.AddField(
            model_name='slot',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.team'),
        ),
        migrations.AddField(
            model_name='slot',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_for_slot', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='RefereeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.IntegerField(choices=[(1, 'Main Referee'), (2, 'Main Referee Deputy'), (3, 'Main Secretary'), (4, 'Referee'), (5, 'Senior Exercise Referee'), (6, 'Senior Referee of the Exercise Group'), (7, 'Weaponry Referee'), (8, 'Technical Referee')], default=4)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_referee_slot', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RefereeGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(choices=[(5, 'Excellent'), (4, 'Good'), (3, 'Satisfactorily'), (2, 'Unsatisfactorily')], default=5)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
                ('referee_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.refereeslot')),
            ],
        ),
        migrations.CreateModel(
            name='PrivacySetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_visibility', models.PositiveSmallIntegerField(choices=[(1, 'All'), (2, 'Only subscribers'), (3, 'Only me')], default=1)),
                ('email_visibility', models.PositiveSmallIntegerField(choices=[(1, 'All'), (2, 'Only subscribers'), (3, 'Only me')], default=1)),
                ('want_to_get_mails_from_atlima', models.BooleanField(default=False)),
                ('who_can_send_messages', models.PositiveSmallIntegerField(choices=[(1, 'All'), (2, 'Only subscribers'), (3, 'Only me')], default=1)),
                ('blocked', models.ManyToManyField(related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PriceConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='PracticalShootingMatchType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='PostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='post_images')),
                ('blurhash', models.CharField(blank=True, max_length=4096, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='post_documents')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.event')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('likes', models.PositiveIntegerField(default=0)),
                ('views', models.PositiveIntegerField(default=0)),
                ('reposted', models.PositiveIntegerField(default=0)),
                ('comments', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('creator_organizer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_creator_organizer', to='core.organizer', verbose_name='Creator (organizer)')),
                ('creator_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('post_attachments', models.ManyToManyField(to='core.postattachment')),
                ('repost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.post')),
            ],
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clause', models.CharField(max_length=16)),
                ('cost_in_seconds', models.PositiveSmallIntegerField(default=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
                ('disciplines', models.ManyToManyField(to='core.discipline')),
            ],
        ),
        migrations.AddField(
            model_name='organizer',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizer_region', to='core.region'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_type', models.CharField(max_length=128)),
                ('object_id', models.PositiveBigIntegerField()),
                ('amount', models.PositiveBigIntegerField()),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.order')),
                ('promocode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.promocode')),
            ],
        ),
        migrations.CreateModel(
            name='OfficialQualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification', models.IntegerField(choices=[(1, 'Sport qualification'), (2, 'Referee qualification'), (3, 'Instructor qualification')], default=2)),
                ('category', models.IntegerField(choices=[(1, 'Junior referee'), (2, 'Sport referee III'), (3, 'Sport referee II'), (4, 'Sport referee I'), (5, 'Sport referee of the all-Russian')], default=1)),
                ('document_file', models.FileField(blank=True, null=True, upload_to='', verbose_name='related_document_file')),
                ('IROA', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('dismissed', models.BooleanField(default=False)),
                ('dismiss_reason', models.CharField(blank=True, max_length=4096, null=True)),
                ('approved_date', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sport_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualification_sport', to='core.sport')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=1024)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
                ('system_event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='system_event_type', to='core.systemeventtype')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_readed', models.BooleanField(default=False, verbose_name='User has read notification')),
                ('atlima_obj_id', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('atlima_obj_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sender_model', to='core.systemobject')),
                ('notification_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='template_used', to='core.notificationtemplate')),
                ('system_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='system_event_notify', to='core.systemevent')),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='FrontendLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('device_id', models.CharField(max_length=512)),
                ('message', models.TextField(blank=True, null=True)),
                ('stack_trace', models.TextField(blank=True, null=True)),
                ('build', models.PositiveBigIntegerField()),
                ('log_date', models.DateTimeField(auto_now_add=True)),
                ('error_code', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('counts', models.PositiveIntegerField(default=1)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventRefereeInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.IntegerField(choices=[(1, 'Main Referee'), (2, 'Main Referee Deputy'), (3, 'Main Secretary'), (4, 'Referee'), (5, 'Senior Exercise Referee'), (6, 'Senior Referee of the Exercise Group'), (7, 'Weaponry Referee'), (8, 'Technical Referee')], default=1)),
                ('status', models.IntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Dismissed'), (4, 'Moderated')], default=1)),
                ('dismiss_reason', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_judges_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_level', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('squads_amount', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('shooters_in_squad', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('prematch', models.BooleanField(default=False)),
                ('standart_speed_courses', models.BooleanField(default=False)),
                ('number_in_calendar_plan', models.CharField(blank=True, max_length=64, null=True)),
                ('disciplines', models.ManyToManyField(to='core.discipline')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sport')),
            ],
        ),
        migrations.CreateModel(
            name='EventOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination', models.CharField(choices=[('For User', 'For User'), ('For Organizer', 'For Organizer')], default='For User', max_length=15)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='EventFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='evsk',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.eventevskstatus'),
        ),
        migrations.AddField(
            model_name='event',
            name='format',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_format', to='core.eventformat'),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_organizer', to='core.organizer'),
        ),
        migrations.AddField(
            model_name='event',
            name='price_option',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_price_option', to='core.priceconfiguration'),
        ),
        migrations.AddField(
            model_name='event',
            name='promocodes',
            field=models.ManyToManyField(to='core.promocode'),
        ),
        migrations.AddField(
            model_name='event',
            name='properties',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.eventproperty'),
        ),
        migrations.AddField(
            model_name='event',
            name='referee_slots',
            field=models.ManyToManyField(to='core.refereeslot'),
        ),
        migrations.AddField(
            model_name='event',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_region', to='core.region'),
        ),
        migrations.AddField(
            model_name='event',
            name='slots',
            field=models.ManyToManyField(to='core.slot'),
        ),
        migrations.AddField(
            model_name='event',
            name='sport_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_sport_type', to='core.sport'),
        ),
        migrations.AddField(
            model_name='event',
            name='teams',
            field=models.ManyToManyField(to='core.team'),
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('name_ru', models.CharField(blank=True, max_length=32, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='divisions')),
                ('description_ru', models.CharField(blank=True, max_length=64, null=True)),
                ('description_en', models.CharField(blank=True, max_length=64, null=True)),
                ('can_be_minor', models.BooleanField(default=True)),
                ('can_be_major', models.BooleanField(default=True)),
                ('custom_style', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('weapon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.weapon')),
            ],
        ),
        migrations.CreateModel(
            name='DisqualificationReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content', models.ManyToManyField(to='core.content')),
            ],
        ),
        migrations.AddField(
            model_name='discipline',
            name='division',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.division'),
        ),
        migrations.CreateModel(
            name='CoursePenalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField()),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('aggregated_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.aggregatedcourseresultforslot')),
                ('penalty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.penalty')),
            ],
        ),
        migrations.AddField(
            model_name='content',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.systemlanguage'),
        ),
        migrations.CreateModel(
            name='ConfirmationActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=32)),
                ('data', models.CharField(max_length=64)),
                ('target', models.CharField(max_length=128)),
                ('status', models.PositiveSmallIntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Complain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.BigIntegerField()),
                ('user_ip', models.CharField(blank=True, max_length=120, null=True)),
                ('reason', models.IntegerField(choices=[(1, 'SPAM'), (2, 'FORBIDDEN CONTENT'), (3, 'FRAUD'), (4, 'COPYRIGHT'), (5, 'VIOLENCE'), (6, 'PERSONAL DATA')], default=1)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'APPROVED'), (2, 'DECLINED')], default=None, null=True)),
                ('moderator_ip', models.CharField(blank=True, max_length=120, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complain_moderator', to=settings.AUTH_USER_MODEL)),
                ('object_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.systemobject')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentable_id', models.PositiveBigIntegerField()),
                ('comment_id', models.PositiveBigIntegerField()),
                ('message', models.TextField()),
                ('reply_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='content',
            field=models.ManyToManyField(to='core.content'),
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.region'),
        ),
        migrations.AddField(
            model_name='aggregatedcourseresultforslot',
            name='cancel_reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.disqualificationreason'),
        ),
        migrations.AddField(
            model_name='aggregatedcourseresultforslot',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.course'),
        ),
        migrations.AddField(
            model_name='aggregatedcourseresultforslot',
            name='discipline',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.discipline'),
        ),
        migrations.AddField(
            model_name='aggregatedcourseresultforslot',
            name='referee_slot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.refereeslot'),
        ),
        migrations.AddField(
            model_name='aggregatedcourseresultforslot',
            name='slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.slot'),
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.city'),
        ),
        migrations.AddField(
            model_name='user',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.country'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='privacy',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.privacysetting'),
        ),
        migrations.AddField(
            model_name='user',
            name='qualifications',
            field=models.ManyToManyField(to='core.officialqualification'),
        ),
        migrations.AddField(
            model_name='user',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.region'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.post')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['region'], name='core_city_region__d69fbf_idx'),
        ),
    ]
